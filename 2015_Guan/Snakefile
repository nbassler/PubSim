import os

from pymchelper.input_output import frompattern
from snakemake.io import expand, glob_wildcards

try:
    workspace = 'workspace_' + os.getenv('TIMEPATTERN')
except TypeError:
    workspace = 'workspace'

config_wildcard = "sim-files/config_{ion}.cfg"
ions, = glob_wildcards(config_wildcard)

from pymchelper.utils.mcscripter import Config
expected_files = []
for ion in ions:
    base_cwd = os.getcwd()  # this is needed first
    cfg = Config(config_wildcard.format(ion=ion))  # this one calls os.chdir to change working directory to something evil
    for pmma in cfg.table_dict['PMMA']:
        expected_output_file = os.path.join(workspace, ion, "{ion}_{pmma}".format(ion=ion, pmma=pmma), 'bin_data_all.dat')
        expected_files.append(expected_output_file)
    os.chdir(base_cwd)  # let us change back working directory to the original one

rule all:
    input:
        expected_files,
    output:
        expand("{workspace}/summary.csv", workspace=workspace)
    run:
        import merge
        merge.merge_files(workspace, 'bin_data_all.dat', output[0])

rule run_mc_simulation:
    input:
        "{workspace}/{ion}/{ion}.log"
    output:
        "{workspace}/{ion}/{ion}_{pmma}/bin_data_all.dat"
    run:
        import subprocess
        new_dir = os.path.join(wildcards.workspace, wildcards.ion, wildcards.ion + "_" + wildcards.pmma)
        print("working dir", new_dir)
        nprim = str(config.get("nprim", 1000))
        stop_time = str(config.get("stop_time", "00:02:00"))
        if "SLURM_JOB_NAME" in os.environ and os.getenv("SLURM_JOB_NAME") == 'run_mc_simulation':
            with open(os.path.join(new_dir, "jobs.cfg"), "w") as file1:
                file1.write("0-{ntasks} shieldhit -s --seedoffset=%t --time=\"{stop_time}\" --nstat={nprim} .\n".format(ntasks=int(os.getenv("SLURM_NTASKS"))-1, nprim=nprim, stop_time=stop_time))
            cmd = ["srun", "--multi-prog", "jobs.cfg"]
        else:
            cmd = ["shieldhit", "-s", "-n", nprim, "-t", stop_time, "."]
        subprocess.run(cmd, cwd=new_dir)
        estimators = frompattern(new_dir + '/*.bdo')
        from collect import save_summary_file
        for estimator in estimators:
            save_summary_file(estimator, new_dir, output_suffix='_all.dat')


rule generate_mc_input:
    input:
        "{workspace}/prepare.log",
        config_wildcard
    output:
        "{workspace}/{ion}/{ion}.log"
    run:
        import logging
        from pymchelper.utils.mcscripter import Config, Template, Generator
        logging.basicConfig(level=logging.INFO)

        base_cwd = os.getcwd() # this is needed first
        cfg = Config(input[1])  # this one calls os.chdir to change working directory to something evil
        cfg.const_dict["WDIR"] = os.path.join(base_cwd, wildcards.workspace, wildcards.ion, "${NAME}")
        t = Template(cfg)
        Generator(t, cfg)
        os.chdir(base_cwd)  # let us change back working directory to the original one

        from pathlib import Path
        f = os.path.join(base_cwd, wildcards.workspace, wildcards.ion, wildcards.ion + '.log')
        Path(f).touch()
        print("Touching {}".format(f))


rule prepare_workspace:
    output:
        "{workspace}/prepare.log"
    run:
        os.makedirs(workspace,exist_ok=True)
        from pathlib import Path
        f = os.path.join(workspace,'prepare.log')
        Path(f).touch()
        print("Touching {}".format(f))
